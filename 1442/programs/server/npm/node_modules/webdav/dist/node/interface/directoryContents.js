"use strict";

const pathPosix = require("path-posix");

const _require = require("../merge.js"),
      merge = _require.merge;

const _require2 = require("../response.js"),
      handleResponseCode = _require2.handleResponseCode,
      processGlobFilter = _require2.processGlobFilter,
      processResponsePayload = _require2.processResponsePayload;

const _require3 = require("../url.js"),
      normaliseHREF = _require3.normaliseHREF,
      normalisePath = _require3.normalisePath;

const _require4 = require("./dav.js"),
      getSingleValue = _require4.getSingleValue,
      getValueForKey = _require4.getValueForKey,
      parseXML = _require4.parseXML,
      propsToStat = _require4.propsToStat;

const _require5 = require("../request.js"),
      encodePath = _require5.encodePath,
      joinURL = _require5.joinURL,
      prepareRequestOptions = _require5.prepareRequestOptions,
      request = _require5.request;

function getDirectoryContents(remotePath, options) {
  const requestOptions = {
    url: joinURL(options.remoteURL, encodePath(remotePath), "/"),
    method: "PROPFIND",
    headers: {
      Accept: "text/plain",
      Depth: options.deep ? "infinity" : 1
    },
    responseType: "text"
  };
  let response = null;
  prepareRequestOptions(requestOptions, options);
  return request(requestOptions).then(handleResponseCode).then(res => {
    response = res;
    return res.data;
  }).then(parseXML).then(result => getDirectoryFiles(result, options.remotePath, remotePath, options.details)).then(files => processResponsePayload(response, files, options.details)).then(files => options.glob ? processGlobFilter(files, options.glob) : files);
}

function getDirectoryFiles(result, serverBasePath, requestPath, isDetailed = false) {
  const remoteTargetPath = pathPosix.join(serverBasePath, requestPath, "/");
  const serverBase = pathPosix.join(serverBasePath, "/"); // Extract the response items (directory contents)

  const multiStatus = getValueForKey("multistatus", result);
  const responseItems = getValueForKey("response", multiStatus);
  return responseItems // Filter out the item pointing to the current directory (not needed)
  .filter(item => {
    let href = getSingleValue(getValueForKey("href", item));
    href = pathPosix.join(normalisePath(normaliseHREF(href)), "/");
    return href !== serverBase && href !== remoteTargetPath;
  }) // Map all items to a consistent output structure (results)
  .map(item => {
    // HREF is the file path (in full)
    let href = getSingleValue(getValueForKey("href", item));
    href = normaliseHREF(href); // Each item should contain a stat object

    const propStat = getSingleValue(getValueForKey("propstat", item));
    const props = getSingleValue(getValueForKey("prop", propStat)); // Process the true full filename (minus the base server path)

    const filename = serverBase === "/" ? normalisePath(href) : normalisePath(pathPosix.relative(serverBase, href));
    return propsToStat(props, filename, isDetailed);
  });
}

module.exports = {
  getDirectoryContents
};