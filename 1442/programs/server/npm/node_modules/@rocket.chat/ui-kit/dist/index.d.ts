import { ElementType, BlockContext, IElement, TextObject, IPlainText, IMarkdown, IDividerBlock, ISectionBlock, IImageBlock, IActionsBlock, IContextBlock, IInputBlock, IButtonElement, IImageElement, IDatePickerElement, IStaticSelectElement, IMultiStaticSelectElement, IOverflowElement, IPlainTextInput, SectionAccessoryElement, ActionElement, ContextElement, InputElement, IBlock, Conditions } from './blocks';
export declare const version: string;
declare type BlockRenderer<T, B extends IBlock> = (block: B, context: BlockContext.BLOCK, index: number) => T;
declare type ElementRenderer<T, E extends IElement> = (element: E, context: BlockContext, index: number) => T;
declare type ElementSetRenderer<T, E extends IElement> = (element: E, context: BlockContext, _: undefined, index: number) => T;
interface IParser<T> {
    text: ElementRenderer<T, TextObject>;
    plainText: ElementRenderer<T, IPlainText>;
    mrkdwn: ElementRenderer<T, IMarkdown>;
}
interface IParserMessage<T> extends IParser<T> {
    divider: BlockRenderer<T, IDividerBlock>;
    section: BlockRenderer<T, ISectionBlock>;
    image: BlockRenderer<T, IImageBlock> | ElementRenderer<T, IImageElement>;
    actions: BlockRenderer<T, IActionsBlock>;
    context: BlockRenderer<T, IContextBlock>;
    button: ElementRenderer<T, IButtonElement>;
    datePicker: ElementRenderer<T, IDatePickerElement>;
    staticSelect: ElementRenderer<T, IStaticSelectElement>;
    multiStaticSelect: ElementRenderer<T, IMultiStaticSelectElement>;
    overflow: ElementRenderer<T, IOverflowElement>;
    renderAccessories: ElementSetRenderer<T, SectionAccessoryElement>;
    renderActions: ElementSetRenderer<T, ActionElement>;
    renderContext: ElementSetRenderer<T, ContextElement>;
}
interface IParserModal<T> extends IParserMessage<T> {
    input: BlockRenderer<T, IInputBlock>;
    plainInput: ElementRenderer<T, IPlainTextInput>;
    renderInputs: ElementSetRenderer<T, InputElement>;
}
declare abstract class UiKitParserText implements IParser<unknown> {
    plainText: ElementRenderer<unknown, IPlainText>;
    mrkdwn: ElementRenderer<unknown, IMarkdown>;
    text: (text: TextObject, context: BlockContext, index: number) => unknown;
}
declare abstract class UiKitParserMessage extends UiKitParserText implements IParserMessage<unknown> {
    divider: ElementRenderer<unknown, IDividerBlock>;
    section: ElementRenderer<unknown, ISectionBlock>;
    image: ElementRenderer<unknown, IImageBlock>;
    actions: ElementRenderer<unknown, IActionsBlock>;
    context: ElementRenderer<unknown, IContextBlock>;
    button: (element: IButtonElement, context: BlockContext, index: number) => unknown;
    datePicker: (element: IDatePickerElement, context: BlockContext, index: number) => unknown;
    staticSelect: (element: IStaticSelectElement, context: BlockContext, index: number) => unknown;
    multiStaticSelect: (element: IMultiStaticSelectElement, context: BlockContext, index: number) => unknown;
    overflow: (element: IOverflowElement, context: BlockContext, index: number) => unknown;
    renderAccessories: ElementSetRenderer<unknown, IElement>;
    renderActions: ElementSetRenderer<unknown, IElement>;
    renderContext: ElementSetRenderer<unknown, IElement>;
}
declare abstract class UiKitParserModal extends UiKitParserMessage implements IParserModal<unknown> {
    input: ElementRenderer<unknown, IInputBlock>;
    plainInput: ElementRenderer<unknown, IElement>;
    renderInputs: ElementSetRenderer<unknown, IElement>;
}
declare const uiKitText: (parser: IParser<unknown>, conditions?: Conditions) => (blocks: unknown) => any;
declare const uiKitMessage: (parser: IParser<unknown>, conditions?: Conditions) => (blocks: unknown) => any;
declare const uiKitModal: (parser: IParser<unknown>, conditions?: Conditions) => (blocks: unknown) => any;
export { ElementType as ELEMENT_TYPES, BlockContext as BLOCK_CONTEXT, UiKitParserText, UiKitParserMessage, UiKitParserModal, uiKitText, uiKitMessage, uiKitModal, };
export * from './blocks';
